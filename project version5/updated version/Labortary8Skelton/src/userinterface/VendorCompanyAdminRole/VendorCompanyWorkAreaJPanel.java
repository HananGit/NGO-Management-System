/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.VendorCompanyAdminRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.EnterpriseDirectory;
import Business.Enterprise.EnterpriseRelation;
import Business.Network.Network;
import Business.Organization.EventManagementOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.EventResourcesWorkRequest;
import Business.WorkQueue.WorkRequest;
import Business.emailclass;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sushr
 */
public class VendorCompanyWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form VendorCompanyWorkAreaJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    Organization organization;
    EcoSystem business;
    Enterprise enterprise;
    EnterpriseDirectory enterpriseDirectory;

    public VendorCompanyWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.business = business;
        this.enterprise = enterprise;
        loop:
        for (Network n : business.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e.equals(enterprise)) {
                    enterpriseDirectory = n.getEnterpriseDirectory();
                    break loop;

                }

            }

        }
        populateTable();
    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//            Object[] row = new Object[4];
        for (EnterpriseRelation er : enterprise.getEnterpriseRelationDirectory().getRelationList()) {

            for (Enterprise e : enterpriseDirectory.getEnterpriseList()) {
                if (e.getName().equals(er.getCompanyName())) {
                    for (WorkRequest request : e.getWorkQueue().getWorkRequestList()) {
                        if (request instanceof EventResourcesWorkRequest && (request.getStatus().equals("Requested"))) {
                            Object[] row = new Object[5];
                            row[0] = request;
                            row[1] = request.getSender().getEmployee().getName();
//            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                            long millis = request.getRequiredDate();
                            Date d = new Date(millis);
                            row[2] = d;
                            row[3] = request.getStatus();
                            row[4] = request.isChanged();
                            dtm.addRow(row);

                        }

                    }

                }
            }
        }
        populateSelfTable();
    }
    public void populateSelfTable()
    {
        for(WorkRequest wr:account.getWorkQueue().getWorkRequestList())
        {
            DefaultTableModel dtm = (DefaultTableModel) jTableCompleted.getModel();
            Object[]row= new Object[4];
            dtm.setRowCount(0);
            row[0]=wr;
            
            Date d = new Date(wr.getCreatedDate());
            row[2]=d;
            
            if(wr instanceof EventResourcesWorkRequest)
            {
                row[3]="Target Resources";
                EventResourcesWorkRequest rwr = (EventResourcesWorkRequest)wr;
                row[1]=rwr.getTitle();
            }
            dtm.addRow(row);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonView = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        remarksjTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jButtonApprove = new javax.swing.JButton();
        jButtonReject = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableCompleted = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title", "Sender", "Status", "Requested Date", "Changed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonView.setText("View");
        jButtonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewActionPerformed(evt);
            }
        });

        remarksjTextArea.setColumns(20);
        remarksjTextArea.setRows(5);
        jScrollPane2.setViewportView(remarksjTextArea);

        jLabel2.setText("Remarks");

        jButtonApprove.setText("Approve");
        jButtonApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApproveActionPerformed(evt);
            }
        });

        jButtonReject.setText("Reject");
        jButtonReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRejectActionPerformed(evt);
            }
        });

        jTableCompleted.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Title", "Create Date", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableCompleted);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButtonView)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonApprove)
                    .addComponent(jButtonReject)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonApprove)
                        .addGap(29, 29, 29)
                        .addComponent(jButtonReject)
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(335, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApproveActionPerformed
            int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "would you like to approve this request?", "message", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                EventResourcesWorkRequest ewr = (EventResourcesWorkRequest) jTable1.getValueAt(selectedRow, 0);
                
                ewr.setMessage("Event has been approved by the Vendor ");
                ewr.setStatus("Approved");
                account.getWorkQueue().getWorkRequestList().add(ewr);
                
                String sendTo=null;
        int count=0;
        for (Network n : business.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                
                    for (Organization o:e.getOrganizationDirectory().getOrganizationList()) {
                        {
                            if(o instanceof EventManagementOrganization)
                            {
//                                count=0;
                                for(UserAccount ua:o.getUserAccountDirectory().getUserAccountList())
                                {
                                    if(ua.getUsername().equals(ewr.getSender())){
                                    sendTo=ua.getEmail();
//                                    count++;
                                    }
                                    
                                }
                                
                            }
                            
                        }
                    }
                }
            }
        
        
//      ****************************************** Email code ***************************
            try{
            emailclass.generateAndSendEmailEventResources(sendTo,ewr);
            }
            catch(Exception e)
            {
                System.out.println(""+e);
            }

                
                
                populateTable();
                ewr.setSender(account);
                    
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row from table first", "Warning", JOptionPane.WARNING_MESSAGE);
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButtonApproveActionPerformed

    private void jButtonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewActionPerformed
        int selectedRow=jTable1.getSelectedRow();
        if (selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row from the table first to view details","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else
        {
        EventResourcesWorkRequest wr=(EventResourcesWorkRequest)jTable1.getValueAt(selectedRow,0);
        ViewEventRequestedResources viewRequestedResources = new ViewEventRequestedResources(userProcessContainer,wr,account);
        userProcessContainer.add("ViewEventRequestedResources", viewRequestedResources);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);}
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonViewActionPerformed

    private void jButtonRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRejectActionPerformed
                if(remarksjTextArea.getText().length()==0)
        {
            JOptionPane.showMessageDialog(null, "Please write remarks for rejection");
        }
        else{
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to Reject? ", "message", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
//                    remarksTextArea.setVisible(true);
//                    jLabel6.setVisible(true);
                EventResourcesWorkRequest ewr = (EventResourcesWorkRequest) jTable1.getValueAt(selectedRow, 0);
                ewr.setSender(account);
                ewr.setMessage(remarksjTextArea.getText());
                ewr.setStatus("Rejected");
                
                populateTable();
                remarksjTextArea.setText("");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row from table first", "Warning", JOptionPane.WARNING_MESSAGE);
        }
                }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonRejectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApprove;
    private javax.swing.JButton jButtonReject;
    private javax.swing.JButton jButtonView;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableCompleted;
    private javax.swing.JTextArea remarksjTextArea;
    // End of variables declaration//GEN-END:variables
}
